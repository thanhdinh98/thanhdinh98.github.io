"use strict";(self.webpackChunkthanhdinh_98=self.webpackChunkthanhdinh_98||[]).push([[741],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=i.createContext({}),u=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=u(e.components);return i.createElement(c.Provider,{value:n},e.children)},o={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,T=p["".concat(c,".").concat(m)]||p[m]||o[m]||r;return t?i.createElement(T,s(s({ref:n},d),{},{components:t})):i.createElement(T,s({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var u=2;u<r;u++)s[u]=t[u];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4092:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=t(7462),a=(t(7294),t(3905));const r={},s="Lucky Spin",l={type:"mdx",permalink:"/work/01G729PP2TMRGEQRFRP73PEV4X",source:"@site/src/pages/work/01G729PP2TMRGEQRFRP73PEV4X.md",title:"Lucky Spin",description:"Document for lucky spin",frontMatter:{}},c=[{value:"Database designs",id:"database-designs",children:[],level:2},{value:"1 Admin",id:"1-admin",children:[{value:"1.1 Create lucky spin daily",id:"11-create-lucky-spin-daily",children:[{value:"Endpoint:",id:"endpoint",children:[],level:4},{value:"Validation:",id:"validation",children:[],level:4},{value:"Test script:",id:"test-script",children:[],level:4}],level:3},{value:"1.2 Toggle lucky spin daily",id:"12-toggle-lucky-spin-daily",children:[{value:"Endpoint:",id:"endpoint-1",children:[],level:4},{value:"Validation:",id:"validation-1",children:[],level:4},{value:"Test script:",id:"test-script-1",children:[],level:4}],level:3},{value:"1.3 Get list lucky spin daily",id:"13-get-list-lucky-spin-daily",children:[{value:"Endpoint:",id:"endpoint-2",children:[],level:4},{value:"Test script:",id:"test-script-2",children:[],level:4}],level:3}],level:2},{value:"2 Client",id:"2-client",children:[],level:2}],u={toc:c};function d(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"lucky-spin"},"Lucky Spin"),(0,a.kt)("p",null,"Document for lucky spin"),(0,a.kt)("h2",{id:"database-designs"},"Database designs"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"db digaram",src:t(2801).Z,width:"1320",height:"884"})),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://dbdiagram.io/d/62c1c2e369be0b672c8d7f1a"},"Link dbdiagram.io")),(0,a.kt)("p",null,"SQL scripts:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-SQL"},"CREATE TABLE IF NOT EXISTS game_portal.lucky_spin_item (\n  id INT unsigned NOT NULL AUTO_INCREMENT,\n  name VARCHAR(100) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL UNIQUE,\n  currency CHAR(5) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL,\n  create_time bigint NOT NULL,\n\n  PRIMARY KEY(id)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE IF NOT EXISTS game_portal.lucky_spin_item_set (\n  id INT UNSIGNED NOT NULL AUTO_INCREMENT,\n  description VARCHAR(100) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL,\n  lucky_spin_item_id INT UNSIGNED NOT NULL,\n  threshold INT UNSIGNED NOT NULL DEFAULT 0,\n  amount INT UNSIGNED NOT NULL,\n  probability float UNSIGNED NOT NULL,\n  remaining INT UNSIGNED NOT NULL DEFAULT 0,\n  order_number INT UNSIGNED NOT NULL,\n  set_id CHAR(32) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL,\n  create_time bigint NOT NULL,\n\n  PRIMARY KEY(id)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE IF NOT EXISTS game_portal.lucky_spin_daily (\n  id INT UNSIGNED NOT NULL AUTO_INCREMENT,\n  lucky_spin_item_set_id char(32) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL,\n  status INT NOT NULL,\n  create_time bigint NOT NULL,\n  update_time bigint NOT NULL,\n\n  PRIMARY KEY(id)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE IF NOT EXISTS game_portal.lucky_spin_daily_txn (\n  id INT UNSIGNED NOT NULL AUTO_INCREMENT,\n  subject varchar(44) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL,\n  network varchar(10) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL,\n  amount INT UNSIGNED NOT NULL,\n  lucky_spin_item_set_id INT UNSIGNED NOT NULL,\n  create_time bigint NOT NULL,\n\n  PRIMARY KEY(id)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n")),(0,a.kt)("h1",{id:"api-endpoints"},"API endpoints"),(0,a.kt)("h2",{id:"1-admin"},"1 Admin"),(0,a.kt)("h3",{id:"11-create-lucky-spin-daily"},"1.1 Create lucky spin daily"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"create spin flow",src:t(6426).Z,width:"890",height:"284"})),(0,a.kt)("h4",{id:"endpoint"},"Endpoint:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-golang"},'  POST /admin/lucky-spin/create/\n  \n  type (\n    LuckySpinCreateRequest struct {\n      Items []LuckySpinItem `json:"items" validate:"required"`\n    }\n\n    LuckySpinItem struct {\n      Name        string         `json:"name" validate:"required"`\n      Description string         `json:"description" validate:"required"`\n      Currency    gmeta.Currency `json:"currency" validate:"required"`\n      Amount      uint32         `json:"amount" validate:"required;min=0"`\n      Threshold   uint32         `json:"threshold" validate:"required;min=0"`\n      Probability float32        `json:"probability" validate:"required;min=0"`\n    }\n\n    LuckySpinCreateResponse struct {\n      ID uint64 `json:"id"`\n    }\n  )\n')),(0,a.kt)("h4",{id:"validation"},"Validation:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Total probability should be 1"),(0,a.kt)("li",{parentName:"ul"},"Item set need to have 1 default item (1 item with threshold = 0)")),(0,a.kt)("h4",{id:"test-script"},"Test script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'  Scenario: Create daily spin with total probability over 100 percent\n    Given a itemset with sequence percentage of "0.2,0.4,0.1,0.4"\n    When create daily spin\n    Then server return "error_invalid_data" code\n\n  Scenario: Create daily spin with custom default item\n    Given a itemset with "<number>" default item request\n    When create daily spin\n    Then server return "<status>" code\n\n  # item with 0 threshold will set as default\n  Examples:\n      | number | status             |\n      | 0      | error_invalid_data |\n      | 1      | success            |\n      | 2      | error_invalid_data |\n\n  Scenario: Create daily spin successfully\n    Given a correct itemset request\n    When create daily spin\n    Then server return "success" code\n\n  Scenario: Create daily spin successfully with no duplicated spin item\n    Given a correct itemset request\n    When create daily spin\n    Then server return "success" code\n    Then create another daily spin with same itemset request\n    And server return "success" code\n    And item data is not duplicated in DB\n')),(0,a.kt)("h3",{id:"12-toggle-lucky-spin-daily"},"1.2 Toggle lucky spin daily"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"toggle spin flow",src:t(9761).Z,width:"860",height:"250"})),(0,a.kt)("h4",{id:"endpoint-1"},"Endpoint:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-golang"},'  POST /admin/lucky-spin/toggle/\n\n  type (\n    LuckySpinToggleRequest struct {\n      LuckySpinDailyID uint64 `json:"id" validate:"required"`\n    }\n\n    LuckySpinToggleResponse struct {\n      ID     uint64             `json:"id"`\n      Status gmeta.CommonStatus `json:"status"`\n    }\n  )\n')),(0,a.kt)("h4",{id:"validation-1"},"Validation:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"LuckySpinDailyID need to be exists")),(0,a.kt)("h4",{id:"test-script-1"},"Test script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'  Scenario: Toggle lucky spin\n    Given a correct itemset request\n    Then create "<number>" daily spins with spin "<enable_spin>" enable\n    And server return "success" code\n    When toggle daily spin "<toggle_spin>"\n    Then server return "<status>" code\n    And spin "<toggle_spin>" is "<current_spin_status>" and others are "<other_spin_status>"\n  \n  # spin status:\n  # 1: enable\n  # -1: disable\n  Examples:\n      | number | enable_spin | toggle_spin | current_spin_status | other_spin_status | status               |\n      | 2      | 1           | 2           | enable              | disable           | success              |\n      | 2      | 1           | 1           | disable             | disable           | success              |\n      | 2      | 0           | 1           | enable              | disable           | success              |\n      | 2      | 1           | 3           | not_found           | not_found         | error_data_not_found |\n')),(0,a.kt)("h3",{id:"13-get-list-lucky-spin-daily"},"1.3 Get list lucky spin daily"),(0,a.kt)("h4",{id:"endpoint-2"},"Endpoint:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-golang"},'  POST /admin/lucky-spin/list/\n\n  type (\n    LuckySpinGetRequest struct {\n    }\n\n    LuckySpinDaily struct {\n      ID         uint64             `json:"id"`\n      Status     gmeta.CommonStatus `json:"status"`\n      Items      []LuckySpinItem    `json:"items"`\n      CreateTime int64              `json:"create_time"`\n    }\n\n    LuckySpinGetResponse struct {\n      Items []luckyspinmod.LuckySpinDaily `json:"items"`\n    }\n  )\n')),(0,a.kt)("h4",{id:"test-script-2"},"Test script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'  Scenario: List lucky spins\n    Given a correct itemset request\n    When create daily spin\n    Then server return "success" code\n    And number of returned items must match in DB\n')),(0,a.kt)("h2",{id:"2-client"},"2 Client"))}d.isMDXComponent=!0},6426:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/admin-create-spin-87029e99ee3ac841c3bce2475a6e2d90.png"},9761:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/admin-toggle-spin-519b4af894d106b80b8cab28ac54b57e.png"},2801:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/lucky-spin-89b520beffccd651ce601d08acfaf239.png"}}]);